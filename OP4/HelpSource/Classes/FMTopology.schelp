TITLE:: FMTopology
summary:: Frequency / Phase modulation oscillator network topology.
categories:: UGens>Generators>Deterministic

DESCRIPTION::
Create a network of multiple oscillators to create FM/PM synthesis 'algorithms' such as DX7. Apply phase modulation to SinOsc and frequency modulation to the other waveforms.


CLASSMETHODS::

METHOD:: ar
All arguments should be arrays with the same number of elements. However, the elements of the code::modIdxs:: and code::modMuls:: arrays can themselves be arrays.

ARGUMENT:: freqs
The oscillator frequencies.

ARGUMENT:: modIdxs
Indicates which oscillator should be the modulator with index numbers. An array of index numbers can indicate multiple oscillators.

ARGUMENT:: modMuls
The modulator input multipliers. Multiple modulators can be specified individually using an array, or collectively using a number.

ARGUMENT:: amps
The oscillator amplitudes. Oscillators used as modulators are usually set to 0.

ARGUMENT:: envs
The oscillator envelopes.

ARGUMENT:: wavforms
The oscillator waveforms.
table::
## code::\o:: || link::Classes/SinOsc::
## code::\b:: || link::Classes/LFPar::
## code::\s:: || link::Classes/LFSaw::
## code::\t:: || link::Classes/LFTri::
## code::\p:: || link::Classes/LFPulse::
::


INSTANCEMETHODS::


EXAMPLES::

code::
(
// Algorithm #1 from DX7
SynthDef(\algo1, {|nn|
	var frq, env, sig;
	frq = nn.midicps;
	env = EnvGen.ar(Env.perc(0.01, 0.5), doneAction:2);
	sig = FMTopology.ar(
		{ rrand(0, 8.0)*frq } ! 6,
		[1, nil, 3, 4, 5, 5],
		[rrand(0, 2.0), 0, rrand(0, 2.0), rrand(0, 2.0), rrand(0, 2.0), rrand(0, 2.0)],
		[0.2, 0, 0.2, 0, 0, 0],
		env ! 6,
		\o ! 6
	);
	OffsetOut.ar(0, sig!2);
}).add;


// Algorithm #10 from DX7
SynthDef(\algo10, {|nn|
	var frq, env, sig;
	frq = nn.midicps;
	env = EnvGen.ar(Env.perc(0.01, 0.5), doneAction:2);
	sig = FMTopology.ar(
		{ rrand(0, 8.0)*frq } ! 6,
		[1, 2, 2, [4, 5], nil, nil],	// Operator #3 uses #4 and #5 as modulators.
		[rrand(0, 2.0), rrand(0, 2.0), rrand(0, 2.0), {rrand(0, 2.0)}!2, 0, 0],
		[0.2, 0, 0, 0.2, 0, 0],
		env ! 6,
		\o ! 6
	);
	OffsetOut.ar(0, sig!2);
}).add;


Pbindef(\test,
	\instrument, \algo1,
	\dur, Pseq([0.5], inf),
	\nn, Pwhite(48, 60)
).play;
)
::
